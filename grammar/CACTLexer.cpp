
    #include <vector>


// Generated from CACT.g4 by ANTLR 4.13.1


#include "CACTLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct CACTLexerStaticData final {
  CACTLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  CACTLexerStaticData(const CACTLexerStaticData&) = delete;
  CACTLexerStaticData(CACTLexerStaticData&&) = delete;
  CACTLexerStaticData& operator=(const CACTLexerStaticData&) = delete;
  CACTLexerStaticData& operator=(CACTLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag cactlexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
CACTLexerStaticData *cactlexerLexerStaticData = nullptr;

void cactlexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (cactlexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(cactlexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<CACTLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "INT", "BOOL", "DOUBLE", "FLOAT", "VOID", "CONST", "IF", "ELSE", "WHILE", 
      "BREAK", "CONTINUE", "RETURN", "TRUE", "FALSE", "ADD", "SUB", "MUL", 
      "DIV", "MOD", "NOT", "EQ", "NEQ", "GT", "LT", "GE", "LE", "AND", "OR", 
      "Ident", "IntConst", "FloatConst", "DoubleConst", "WS", "LineComment", 
      "BlockComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "','", "';'", "'='", "'['", "']'", "'{'", "'}'", "'('", "')'", 
      "'int'", "'bool'", "'double'", "'float'", "'void'", "'const'", "'if'", 
      "'else'", "'while'", "'break'", "'continue'", "'return'", "'true'", 
      "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'=='", "'!='", 
      "'>'", "'<'", "'>='", "'<='", "'&&'", "'||'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "INT", "BOOL", "DOUBLE", "FLOAT", 
      "VOID", "CONST", "IF", "ELSE", "WHILE", "BREAK", "CONTINUE", "RETURN", 
      "TRUE", "FALSE", "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "EQ", "NEQ", 
      "GT", "LT", "GE", "LE", "AND", "OR", "Ident", "IntConst", "FloatConst", 
      "DoubleConst", "WS", "LineComment", "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,339,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
  	6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
  	1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
  	1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
  	1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,
  	1,35,1,35,1,36,1,36,1,36,1,37,1,37,5,37,224,8,37,10,37,12,37,227,9,37,
  	1,38,1,38,1,38,5,38,232,8,38,10,38,12,38,235,9,38,1,38,1,38,4,38,239,
  	8,38,11,38,12,38,240,1,38,1,38,1,38,1,38,3,38,247,8,38,1,38,4,38,250,
  	8,38,11,38,12,38,251,3,38,254,8,38,1,39,4,39,257,8,39,11,39,12,39,258,
  	3,39,261,8,39,1,39,1,39,5,39,265,8,39,10,39,12,39,268,9,39,1,39,1,39,
  	3,39,272,8,39,1,39,4,39,275,8,39,11,39,12,39,276,3,39,279,8,39,1,39,1,
  	39,1,40,4,40,284,8,40,11,40,12,40,285,3,40,288,8,40,1,40,1,40,5,40,292,
  	8,40,10,40,12,40,295,9,40,1,40,1,40,3,40,299,8,40,1,40,4,40,302,8,40,
  	11,40,12,40,303,3,40,306,8,40,1,41,4,41,309,8,41,11,41,12,41,310,1,41,
  	1,41,1,42,1,42,1,42,1,42,5,42,319,8,42,10,42,12,42,322,9,42,1,42,1,42,
  	1,43,1,43,1,43,1,43,5,43,330,8,43,10,43,12,43,333,9,43,1,43,1,43,1,43,
  	1,43,1,43,1,331,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
  	11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
  	45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
  	34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,1,0,11,
  	3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,
  	57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,69,69,101,101,2,0,43,43,45,45,
  	2,0,70,70,102,102,3,0,9,10,13,13,32,32,2,0,10,10,13,13,361,0,1,1,0,0,
  	0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
  	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
  	0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
  	35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
  	0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
  	0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
  	67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
  	0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
  	0,1,89,1,0,0,0,3,91,1,0,0,0,5,93,1,0,0,0,7,95,1,0,0,0,9,97,1,0,0,0,11,
  	99,1,0,0,0,13,101,1,0,0,0,15,103,1,0,0,0,17,105,1,0,0,0,19,107,1,0,0,
  	0,21,111,1,0,0,0,23,116,1,0,0,0,25,123,1,0,0,0,27,129,1,0,0,0,29,134,
  	1,0,0,0,31,140,1,0,0,0,33,143,1,0,0,0,35,148,1,0,0,0,37,154,1,0,0,0,39,
  	160,1,0,0,0,41,169,1,0,0,0,43,176,1,0,0,0,45,181,1,0,0,0,47,187,1,0,0,
  	0,49,189,1,0,0,0,51,191,1,0,0,0,53,193,1,0,0,0,55,195,1,0,0,0,57,197,
  	1,0,0,0,59,199,1,0,0,0,61,202,1,0,0,0,63,205,1,0,0,0,65,207,1,0,0,0,67,
  	209,1,0,0,0,69,212,1,0,0,0,71,215,1,0,0,0,73,218,1,0,0,0,75,221,1,0,0,
  	0,77,253,1,0,0,0,79,260,1,0,0,0,81,287,1,0,0,0,83,308,1,0,0,0,85,314,
  	1,0,0,0,87,325,1,0,0,0,89,90,5,44,0,0,90,2,1,0,0,0,91,92,5,59,0,0,92,
  	4,1,0,0,0,93,94,5,61,0,0,94,6,1,0,0,0,95,96,5,91,0,0,96,8,1,0,0,0,97,
  	98,5,93,0,0,98,10,1,0,0,0,99,100,5,123,0,0,100,12,1,0,0,0,101,102,5,125,
  	0,0,102,14,1,0,0,0,103,104,5,40,0,0,104,16,1,0,0,0,105,106,5,41,0,0,106,
  	18,1,0,0,0,107,108,5,105,0,0,108,109,5,110,0,0,109,110,5,116,0,0,110,
  	20,1,0,0,0,111,112,5,98,0,0,112,113,5,111,0,0,113,114,5,111,0,0,114,115,
  	5,108,0,0,115,22,1,0,0,0,116,117,5,100,0,0,117,118,5,111,0,0,118,119,
  	5,117,0,0,119,120,5,98,0,0,120,121,5,108,0,0,121,122,5,101,0,0,122,24,
  	1,0,0,0,123,124,5,102,0,0,124,125,5,108,0,0,125,126,5,111,0,0,126,127,
  	5,97,0,0,127,128,5,116,0,0,128,26,1,0,0,0,129,130,5,118,0,0,130,131,5,
  	111,0,0,131,132,5,105,0,0,132,133,5,100,0,0,133,28,1,0,0,0,134,135,5,
  	99,0,0,135,136,5,111,0,0,136,137,5,110,0,0,137,138,5,115,0,0,138,139,
  	5,116,0,0,139,30,1,0,0,0,140,141,5,105,0,0,141,142,5,102,0,0,142,32,1,
  	0,0,0,143,144,5,101,0,0,144,145,5,108,0,0,145,146,5,115,0,0,146,147,5,
  	101,0,0,147,34,1,0,0,0,148,149,5,119,0,0,149,150,5,104,0,0,150,151,5,
  	105,0,0,151,152,5,108,0,0,152,153,5,101,0,0,153,36,1,0,0,0,154,155,5,
  	98,0,0,155,156,5,114,0,0,156,157,5,101,0,0,157,158,5,97,0,0,158,159,5,
  	107,0,0,159,38,1,0,0,0,160,161,5,99,0,0,161,162,5,111,0,0,162,163,5,110,
  	0,0,163,164,5,116,0,0,164,165,5,105,0,0,165,166,5,110,0,0,166,167,5,117,
  	0,0,167,168,5,101,0,0,168,40,1,0,0,0,169,170,5,114,0,0,170,171,5,101,
  	0,0,171,172,5,116,0,0,172,173,5,117,0,0,173,174,5,114,0,0,174,175,5,110,
  	0,0,175,42,1,0,0,0,176,177,5,116,0,0,177,178,5,114,0,0,178,179,5,117,
  	0,0,179,180,5,101,0,0,180,44,1,0,0,0,181,182,5,102,0,0,182,183,5,97,0,
  	0,183,184,5,108,0,0,184,185,5,115,0,0,185,186,5,101,0,0,186,46,1,0,0,
  	0,187,188,5,43,0,0,188,48,1,0,0,0,189,190,5,45,0,0,190,50,1,0,0,0,191,
  	192,5,42,0,0,192,52,1,0,0,0,193,194,5,47,0,0,194,54,1,0,0,0,195,196,5,
  	37,0,0,196,56,1,0,0,0,197,198,5,33,0,0,198,58,1,0,0,0,199,200,5,61,0,
  	0,200,201,5,61,0,0,201,60,1,0,0,0,202,203,5,33,0,0,203,204,5,61,0,0,204,
  	62,1,0,0,0,205,206,5,62,0,0,206,64,1,0,0,0,207,208,5,60,0,0,208,66,1,
  	0,0,0,209,210,5,62,0,0,210,211,5,61,0,0,211,68,1,0,0,0,212,213,5,60,0,
  	0,213,214,5,61,0,0,214,70,1,0,0,0,215,216,5,38,0,0,216,217,5,38,0,0,217,
  	72,1,0,0,0,218,219,5,124,0,0,219,220,5,124,0,0,220,74,1,0,0,0,221,225,
  	7,0,0,0,222,224,7,1,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,
  	0,225,226,1,0,0,0,226,76,1,0,0,0,227,225,1,0,0,0,228,254,5,48,0,0,229,
  	233,7,2,0,0,230,232,7,3,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,1,
  	0,0,0,233,234,1,0,0,0,234,254,1,0,0,0,235,233,1,0,0,0,236,238,5,48,0,
  	0,237,239,7,4,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,
  	241,1,0,0,0,241,254,1,0,0,0,242,243,5,48,0,0,243,247,5,120,0,0,244,245,
  	5,48,0,0,245,247,5,88,0,0,246,242,1,0,0,0,246,244,1,0,0,0,247,249,1,0,
  	0,0,248,250,7,5,0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,
  	252,1,0,0,0,252,254,1,0,0,0,253,228,1,0,0,0,253,229,1,0,0,0,253,236,1,
  	0,0,0,253,246,1,0,0,0,254,78,1,0,0,0,255,257,7,3,0,0,256,255,1,0,0,0,
  	257,258,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,261,1,0,0,0,260,256,
  	1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,266,5,46,0,0,263,265,7,3,
  	0,0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,
  	278,1,0,0,0,268,266,1,0,0,0,269,271,7,6,0,0,270,272,7,7,0,0,271,270,1,
  	0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,275,7,3,0,0,274,273,1,0,0,0,
  	275,276,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,269,
  	1,0,0,0,278,279,1,0,0,0,279,280,1,0,0,0,280,281,7,8,0,0,281,80,1,0,0,
  	0,282,284,7,3,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,
  	286,1,0,0,0,286,288,1,0,0,0,287,283,1,0,0,0,287,288,1,0,0,0,288,289,1,
  	0,0,0,289,293,5,46,0,0,290,292,7,3,0,0,291,290,1,0,0,0,292,295,1,0,0,
  	0,293,291,1,0,0,0,293,294,1,0,0,0,294,305,1,0,0,0,295,293,1,0,0,0,296,
  	298,7,6,0,0,297,299,7,7,0,0,298,297,1,0,0,0,298,299,1,0,0,0,299,301,1,
  	0,0,0,300,302,7,3,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,
  	303,304,1,0,0,0,304,306,1,0,0,0,305,296,1,0,0,0,305,306,1,0,0,0,306,82,
  	1,0,0,0,307,309,7,9,0,0,308,307,1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,
  	0,310,311,1,0,0,0,311,312,1,0,0,0,312,313,6,41,0,0,313,84,1,0,0,0,314,
  	315,5,47,0,0,315,316,5,47,0,0,316,320,1,0,0,0,317,319,8,10,0,0,318,317,
  	1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,
  	0,322,320,1,0,0,0,323,324,6,42,0,0,324,86,1,0,0,0,325,326,5,47,0,0,326,
  	327,5,42,0,0,327,331,1,0,0,0,328,330,9,0,0,0,329,328,1,0,0,0,330,333,
  	1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,
  	0,334,335,5,42,0,0,335,336,5,47,0,0,336,337,1,0,0,0,337,338,6,43,0,0,
  	338,88,1,0,0,0,22,0,225,233,240,246,251,253,258,260,266,271,276,278,285,
  	287,293,298,303,305,310,320,331,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  cactlexerLexerStaticData = staticData.release();
}

}

CACTLexer::CACTLexer(CharStream *input) : Lexer(input) {
  CACTLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *cactlexerLexerStaticData->atn, cactlexerLexerStaticData->decisionToDFA, cactlexerLexerStaticData->sharedContextCache);
}

CACTLexer::~CACTLexer() {
  delete _interpreter;
}

std::string CACTLexer::getGrammarFileName() const {
  return "CACT.g4";
}

const std::vector<std::string>& CACTLexer::getRuleNames() const {
  return cactlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& CACTLexer::getChannelNames() const {
  return cactlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& CACTLexer::getModeNames() const {
  return cactlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& CACTLexer::getVocabulary() const {
  return cactlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView CACTLexer::getSerializedATN() const {
  return cactlexerLexerStaticData->serializedATN;
}

const atn::ATN& CACTLexer::getATN() const {
  return *cactlexerLexerStaticData->atn;
}




void CACTLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  cactlexerLexerInitialize();
#else
  ::antlr4::internal::call_once(cactlexerLexerOnceFlag, cactlexerLexerInitialize);
#endif
}
